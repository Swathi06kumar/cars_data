# -*- coding: utf-8 -*-
"""Assignment8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nVQP_3NSKo1E9LqpUTUcSDL0LeGzc5xk

# Assignment8
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn import linear_model

"""# How Much is Your Car Worth?

Data about the retail price of 2005 General Motors cars can be found in `car_data.csv`.

The columns are:

1. Price: suggested retail price of the used 2005 GM car in excellent condition.
2. Mileage: number of miles the car has been driven
3. Make: manufacturer of the car such as Saturn, Pontiac, and Chevrolet
4. Model: specific models for each car manufacturer such as Ion, Vibe, Cavalier
5. Trim (of car): specific type of car model such as SE Sedan 4D, Quad Coupe 2D          
6. Type: body type such as sedan, coupe, etc.      
7. Cylinder: number of cylinders in the engine        
8. Liter: a more specific measure of engine size     
9. Doors: number of doors           
10. Cruise: indicator variable representing whether the car has cruise control (1 = cruise)
11. Sound: indicator variable representing whether the car has upgraded speakers (1 = upgraded)
12. Leather: indicator variable representing whether the car has leather seats (1 = leather)

## Tasks, Part 1

1. Find the linear regression equation for mileage vs price.
2. Chart the original data and the equation on the chart.
3. Find the equation's $R^2$ score (use the `.score` method) to determine whether the
equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)

## Tasks, Part 2

1. Use mileage, cylinders, liters, doors, cruise, sound, and leather to find the linear regression equation.
2. Find the equation's $R^2$ score (use the `.score` method) to determine whether the
equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)
3. Find the combination of the factors that is the best predictor for price.

## Tasks, Hard Mode

1. Research dummy variables in scikit-learn to see how to use the make, model, and body type.
2. Find the best combination of factors to predict price.
"""

df = pd.read_csv("car_data.csv")

df.head()

x = df[['Mileage']]
y = df[['Price']]

linreg = linear_model.LinearRegression()
linreg.fit(x, y)

print('y=',linreg.coef_[0],'x +',linreg.intercept_)

plt.scatter(x, y, color='r')
plt.plot(x, linreg.predict(x))
plt.xlabel('Mileage')
plt.ylabel('Price')
plt.title('Mileage vs Price')

print('r-squared: ', linreg.score(x, y))

feature = ['Mileage', 'Cylinder', 'Liter', 'Doors', 'Cruise', 'Sound', 'Leather']
x = df[feature]
y = df[['Price']]

linreg = linear_model.LinearRegression()
linreg.fit(x, y)

print('y=',linreg.coef_[0],'x +',linreg.intercept_)

print('r-squared: ', linreg.score(x, y))

def dummies(x,df):
    temp = pd.get_dummies(df[x], drop_first = True)
    df = pd.concat([df, temp], axis = 1)
    df.drop([x], axis = 1, inplace = True)
    return df
# Applying the function to the cars_lr
df = dummies('Make',df)
df = dummies('Model',df)
df = dummies('Trim',df)
df = dummies('Type',df)

X=df.iloc[:,1:]
y=df.iloc[:,0]

linreg = linear_model.LinearRegression()
linreg.fit(X, y)

print('y=',linreg.coef_[0],'x +',linreg.intercept_)